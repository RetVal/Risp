//
//  __RispFXHookNSCFBoolean.m
//  Risp
//
//  Created by closure on 5/12/14.
//  Copyright (c) 2014 closure. All rights reserved.
//

#import "__RispFXHookNSCFBoolean.h"
#include <objc/runtime.h>
/* Generated by RuntimeBrowser
 Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 */

@interface __NSCFBoolean : NSNumber {
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;

- (long)_cfNumberType;
- (unsigned long)_cfTypeID;
- (unsigned char)_getValue:(void*)arg1 forType:(long)arg2;
- (BOOL)_isDeallocating;
- (int)_reverseCompare:(id)arg1;
- (BOOL)_tryRetain;
- (BOOL)boolValue;
- (BOOL)charValue;
- (int)compare:(id)arg1;
- (id)copyWithZone:(NSZone *)zone;
- (id)description;
- (id)descriptionWithLocale:(id)arg1;
- (double)doubleValue;
- (void)finalize;
- (float)floatValue;
- (void)getValue:(void*)arg1;
- (unsigned int)hash;
- (int)intValue;
- (int)integerValue;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToNumber:(id)arg1;
- (long long)longLongValue;
- (long)longValue;
- (const char *)objCType;
- (oneway void)release;
- (id)retain;
- (unsigned int)retainCount;
- (short)shortValue;
- (id)stringValue;
- (unsigned char)unsignedCharValue;
- (unsigned int)unsignedIntValue;
- (unsigned int)unsignedIntegerValue;
- (unsigned long long)unsignedLongLongValue;
- (unsigned long)unsignedLongValue;
- (unsigned short)unsignedShortValue;

@end

@implementation __RispFXHookNSCFBoolean
+ (void)load {
    [RispFixupHook hookFromClass:NSClassFromString(@"__NSCFBoolean") selector:@selector(description) withClass:[self class] withSelector:@selector(description)];
    [RispFixupHook hookFromClass:NSClassFromString(@"__NSCFBoolean") selector:@selector(debugDescription) withClass:[self class] withSelector:@selector(debugDescription)];
    [RispFixupHook hookFromClass:NSClassFromString(@"__NSCFBoolean") selector:@selector(descriptionWithLocale:) withClass:[self class] withSelector:@selector(descriptionWithLocale:)];
}

- (NSString *)description {
<<<<<<< HEAD
#if TARGET_OS_IPHONE
    if (0 == strcmp(@encode(char), [self objCType])) {
        return ([self isEqual: @YES]) ? @"true" : @"false";
    }
    return @"false";
#elif TARGET_OS_MAC
    if (0 == strcmp(@encode(BOOL), [self objCType])) {
        return ([self  isEqual: @YES]) ? @"true" : @"false";
    }
    return @"";
#endif
    return @"";
}



=======
    if (0 == strcmp(@encode(BOOL), [self objCType])) {
        return ([self  isEqual: @YES]) ? @"true" : @"false";
    }
    return [super description];
}

>>>>>>> 4aab34e3979f1c676d938d67eceb46aaa0dbc5df
- (NSString *)debugDescription {
    return [self description];
}

- (NSString *)descriptionWithLocale:(id)locale {
    return [self description];
}
@end
